# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Print env
      run: |
        set -x
        echo "WORKSPACE=${GITHUB_WORKSPACE}"
        ls -al ${GITHUB_WORKSPACE}/src/resources/*
    - name: Upload campaigns 
      uses: actions/upload-artifact@v2
      with:
        name: campaigns
        path: src/resources/
  testsanbox:
    runs-on: ubuntu-latest
    needs: build
    # services:
    #   redis:
    #     image: redis
    #     options: >-
    #       --health-cmd "redis-cli ping"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     volumes:
    #       - tc03-07.db:/data/dump.rdb
    steps:
    - name: Download campaigns for job 1
      uses: actions/download-artifact@v2
      with:
        name: campaigns    
    - name: Check out repository code
      uses: actions/checkout@v2          
    - name: Print env
      run: |
        set -x
        echo "WORKSPACE=${GITHUB_WORKSPACE}"
        ls -al ${GITHUB_WORKSPACE}/
        mkdir ~/mycampaigns
    # - name: Test with pytest
    #   run: |
    #     PYTHONPATH="${GITHUB_WORKSPACE}/src"
    #     echo "PTYHONPATH=${GITHUB_WORKSPACE}"
    #     pip install wheel pytest pytest-cov
    #     pytest -s --cov=.  --cov-report=xml ${GITHUB_WORKSPACE}/src/test_redis.py
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v1
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     file: ./coverage.xml
    #     env_vars: OS,PYTHON
    #     name: codecov-umbrella
    #     fail_ci_if_error: true
    #     verbose: true

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 20s
          --health-timeout 15s
          --health-retries 10
        # volumes:
        #   - tc03-07.db:/data/dump.rdb    